# Generated by Django 5.2.7 on 2025-10-27 18:22

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Exercise',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('slug', models.SlugField(max_length=220, unique=True)),
                ('description', models.TextField(help_text='Brief description of what the exercise teaches')),
                ('difficulty', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced')], default='beginner', max_length=20)),
                ('category', models.CharField(choices=[('form_validation', 'Form Validation'), ('live_search', 'Live Search & Filtering'), ('infinite_scroll', 'Infinite Scroll & Pagination'), ('modal_dialog', 'Modal Dialogs'), ('list_operations', 'Dynamic List Operations'), ('dependent_dropdown', 'Dependent Dropdowns'), ('polling', 'Polling & Auto-refresh'), ('file_upload', 'File Upload'), ('drag_drop', 'Drag & Drop'), ('sorting', 'Sorting & Ordering'), ('websocket', 'WebSocket Integration'), ('animations', 'Animations & Transitions'), ('multi_step', 'Multi-step Forms'), ('autocomplete', 'Autocomplete'), ('lazy_loading', 'Lazy Loading')], max_length=50)),
                ('order', models.IntegerField(default=0, help_text='Display order within category (lower numbers appear first)')),
                ('instructions', models.TextField(help_text='Detailed instructions for completing the exercise')),
                ('requirements', models.TextField(blank=True, help_text='Specific requirements that must be met (one per line)')),
                ('starter_html', models.TextField(blank=True, help_text='Initial HTML template code for the exercise')),
                ('starter_python', models.TextField(blank=True, help_text='Initial Python/Django view code for the exercise')),
                ('hints', models.JSONField(blank=True, default=list, help_text='Array of hints, revealed progressively')),
                ('learning_objectives', models.TextField(blank=True, help_text='What the student will learn (one per line)')),
                ('solution_html', models.TextField(blank=True, help_text='Solution HTML template code')),
                ('solution_python', models.TextField(blank=True, help_text='Solution Python/Django view code')),
                ('solution_explanation', models.TextField(blank=True, help_text='Explanation of the solution approach')),
                ('validation_endpoint', models.CharField(blank=True, help_text='URL name of the validation endpoint (if applicable)', max_length=200)),
                ('expected_behavior', models.TextField(blank=True, help_text='Description of the expected behavior when the exercise is complete')),
                ('estimated_time', models.IntegerField(default=30, help_text='Estimated time to complete in minutes')),
                ('tags', models.CharField(blank=True, help_text='Comma-separated tags for searching', max_length=500)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this exercise is available to users')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('prerequisites', models.ManyToManyField(blank=True, help_text='Exercises that should be completed before this one', related_name='unlocks', to='exercises.exercise')),
            ],
            options={
                'verbose_name': 'Exercise',
                'verbose_name_plural': 'Exercises',
                'ordering': ['category', 'order', 'difficulty'],
            },
        ),
        migrations.CreateModel(
            name='ExerciseAttempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_key', models.CharField(blank=True, help_text='For tracking anonymous users', max_length=100)),
                ('submitted_html', models.TextField(blank=True, help_text='HTML code submitted by the user')),
                ('submitted_python', models.TextField(blank=True, help_text='Python code submitted by the user')),
                ('is_correct', models.BooleanField(default=False)),
                ('feedback', models.TextField(blank=True, help_text='Automated or manual feedback on the attempt')),
                ('hints_used', models.IntegerField(default=0, help_text='Number of hints revealed')),
                ('time_spent', models.IntegerField(default=0, help_text='Time spent in seconds')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('exercise', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attempts', to='exercises.exercise')),
                ('user', models.ForeignKey(blank=True, help_text='Optional - for anonymous practice, this can be null', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='exercise_attempts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Exercise Attempt',
                'verbose_name_plural': 'Exercise Attempts',
                'ordering': ['-created_at'],
            },
        ),
    ]
